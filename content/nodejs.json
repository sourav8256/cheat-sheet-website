{
	"title" : "Nodejs",
	"data" : [
		{
			"category-name" : "Socket",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "Setup",
					"code" : "\r\n\r\n\r\n< script src=\"https://cdn.socket.io/socket.io-1.2.0.js\">\r\n</script>\r\n \r\n  <script>\r\n    $(function () {\r\n      var socket = io(\"http://localhost:3000\");\r\n      $('form').submit(function () {\r\n        socket.emit('chat message', $('#m').val());\r\n        $('#m').val('');\r\n        return false;\r\n      });\r\n      socket.on('chat message', function (msg) {\r\n        $('#messages').append($('<li>').text(msg));\r\n        window.scrollTo(0, document.body.scrollHeight);\r\n      });\r\n    });\r\n  </script>\r\n\r\n\r\nsource of socket.io.js file should be from the server itself\r\n\r\nhttp://127.0.0.1:3000/socket.io/socket.io.js\r\n\r\nwhere http://127.0.0.1:3000 is the socket server.\r\n\r\n \r\n<!-- backend -->\r\n \r\n \r\nnpm install socket.io\r\n  \r\nvar app = require('express')();\r\nvar http = require('http').Server(app);\r\nvar io = require('socket.io')(http);\r\nvar port = process.env.PORT || 3000;\r\n \r\napp.get('/', function(req, res){\r\n  res.sendFile(__dirname + '/index.html');\r\n});\r\n \r\nio.on('connection', function(socket){\r\n  socket.on('chat message', function(msg){\r\n    io.emit('chat message', msg);\r\n  });\r\n});\r\n \r\nhttp.listen(port, function(){\r\n  console.log('listening on *:' + port);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Sending broadcast to all/individual clients\r\n\r\nio.on('connection', function(socket){\r\n  socket.on('chat message', function(msg){\r\n    \r\n    // for sending broadcast to all clients\r\n    io.emit('chat message', \"response from socket\");\r\n\r\n    // for sending broadcast to the individual client that connecte\r\n    // save the clients in an array for future use\r\n    socket.emit('chat message', \"response from socket\");\r\n\r\n\r\n    console.log(\"the msg is\",msg);\r\n  });\r\n  //socket.emit(\"chat message\", \"socket emit\");\r\n  console.log(\"io connected\");\r\n});\r\n\r\n",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Adding headers in socket",
					"code" : "var io = require('socket.io')(http,{\r\n    cors: {\r\n      origin: '*',\r\n      methods: [\"GET\", \"POST\"],\r\n    allowedHeaders: [\"my-custom-header\"],\r\n    credentials: true\r\n    }\r\n  });\r\n\r\n",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Rooms",
					"code" : "io.on('connection', socket => {\r\n  socket.join('some room');\r\n});\r\n\r\n\r\nio.to('some room').emit('some event');\r\n\r\n\r\n// send to multiple rooms at once\r\nio.to('room1').to('room2').to('room3').emit('some event');\r\n\r\n\r\nio.on('connection', function(socket){\r\n  socket.to('some room').emit('some event');\r\n  //In that case, every socket in the room excluding the sender will get the event.\r\n});",
					"description" : ""
				}
			]
		},
		{
			"category-name" : "Web Server",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "File Serving",
					"code" : "app.get('/', function(req, res){\r\n  console.log(\"hit\");\r\n  res.sendFile(__dirname + '/index.html');\r\n});",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Access Control",
					"code" : "\r\n// Add headers\r\napp.use(function (req, res, next) {\r\n\r\n    // Website you wish to allow to connect\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n\r\n    // Request methods you wish to allow\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n\r\n    // Request headers you wish to allow\r\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n\r\n    // Set to true if you need the website to include cookies in the requests sent\r\n    // to the API (e.g. in case you use sessions)\r\n    res.setHeader('Access-Control-Allow-Credentials', true);\r\n\r\n    // Pass to next layer of middleware\r\n    next();\r\n});\r\n ",
					"description" : ""
				}
			]
		},
		{
			"category-name" : "Server",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "Keep nodejs application running forever",
					"code" : "pm2 start app\r\npm2 stop app\r\npm2 reload app\r\n\r\n\r\n\"pm2 save\" will generate a startup script that will save all the currently running applications and start on reboot.",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Access Control",
					"code" : "\r\n// Add headers\r\napp.use(function (req, res, next) {\r\n\r\n    // Website you wish to allow to connect\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n\r\n    // Request methods you wish to allow\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n\r\n    // Request headers you wish to allow\r\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n\r\n    // Set to true if you need the website to include cookies in the requests sent\r\n    // to the API (e.g. in case you use sessions)\r\n    res.setHeader('Access-Control-Allow-Credentials', true);\r\n\r\n    // Pass to next layer of middleware\r\n    next();\r\n});\r\n ",
					"description" : ""
				}
			]
		},
		{
			"category-name" : "File System\r\n",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "Read file",
					"code" : "path = require('path'),    \r\n\r\n\r\nvar content = fs.readFileSync(filePath, {encoding: 'utf-8'});\r\n\r\n\r\n\r\n*************\r\nRead directory\r\n\r\nvar fs = require('fs'),\r\n    files = fs.readdirSync(__dirname + '/files/');\r\n\r\nfiles.forEach(function(file) {\r\n  var contents = fs.readFileSync(__dirname + '/files/' + file, 'utf8');\r\n  console.log(contents);\r\n})\r\n\r\n\r\n\r\n\r\n******************\r\n",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Write file",
					"code" : "fs = require('fs');\r\nfs.writeFile(filename, data, [encoding], [callback])\r\n\r\n\r\nfs = require('fs');\r\nfs.writeFile('helloworld.txt', 'Hello World!', function (err) {\r\n  if (err) return console.log(err);\r\n  console.log('Hello World > helloworld.txt');\r\n});\r\n\r\n\r\nfs = require('fs')\r\nfs.writeFile('/etc/doesntexist', 'abc', function (err,data) {\r\n  if (err) {\r\n    return console.log(err);\r\n  }\r\n  console.log(data);\r\n});\r\n\r\n\r\nfs.writeFileSync('../data/phraseFreqs.json', JSON.stringify(output));",
					"description" : ""
				}
			]
		},
		{
			"category-name" : "JSON handling",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "String conversion",
					"code" : "******************\r\nJson to string\r\n\r\nJSON.stringify(value, replacer, space)\r\n\r\nconsole.log(JSON.stringify(j));\r\n\r\nconsole.log(JSON.stringify(j,null,2)); (Third argument is for indentation or beautifying)\r\n\r\n\r\n*********************\r\nStrign to json\r\n\r\n\r\nvar obj = JSON.parse('{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}');\r\n",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Write file",
					"code" : "fs = require('fs');\r\nfs.writeFile(filename, data, [encoding], [callback])\r\n\r\n\r\nfs = require('fs');\r\nfs.writeFile('helloworld.txt', 'Hello World!', function (err) {\r\n  if (err) return console.log(err);\r\n  console.log('Hello World > helloworld.txt');\r\n});\r\n\r\n\r\nfs = require('fs')\r\nfs.writeFile('/etc/doesntexist', 'abc', function (err,data) {\r\n  if (err) {\r\n    return console.log(err);\r\n  }\r\n  console.log(data);\r\n});\r\n\r\n\r\nfs.writeFileSync('../data/phraseFreqs.json', JSON.stringify(output));",
					"description" : ""
				}
			]
		},
		{
			"category-name" : "Quick Access",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "full http server",
					"code" : "https://github.com/nbluis/static-server",
					"description" : ""
				},
				{
					"id" : "sfdjsl1",
					"name" : "Write file",
					"code" : "fs = require('fs');\r\nfs.writeFile(filename, data, [encoding], [callback])\r\n\r\n\r\nfs = require('fs');\r\nfs.writeFile('helloworld.txt', 'Hello World!', function (err) {\r\n  if (err) return console.log(err);\r\n  console.log('Hello World > helloworld.txt');\r\n});\r\n\r\n\r\nfs = require('fs')\r\nfs.writeFile('/etc/doesntexist', 'abc', function (err,data) {\r\n  if (err) {\r\n    return console.log(err);\r\n  }\r\n  console.log(data);\r\n});\r\n\r\n\r\nfs.writeFileSync('../data/phraseFreqs.json', JSON.stringify(output));",
					"description" : ""
				}
			]
		},
		{
			"category-name" : "Graphics",
			"sub-list" : [
				{
					"id" : "sfdjsl1",
					"name" : "Nodejs canvas",
					"code" : "npm i canvas --save\r\n\r\nconst fs = require('fs')\r\nconst { createCanvas, loadImage } = require('canvas')\r\nconst width = 1200\r\nconst height = 630\r\nconst canvas = createCanvas(width, height)\r\nconst context = canvas.getContext('2d')\r\ncontext.fillStyle = '#000'\r\ncontext.fillRect(0, 0, width, height)\r\ncontext.font = 'bold 70pt Menlo'\r\ncontext.textAlign = 'center'\r\ncontext.textBaseline = 'top'\r\ncontext.fillStyle = '#3574d4'\r\nconst text = 'Hello, World!'\r\nconst textWidth = context.measureText(text).width\r\ncontext.fillRect(600 - textWidth / 2 - 10, 170 - 5, textWidth + 20, 120)\r\ncontext.fillStyle = '#fff'\r\ncontext.fillText(text, 600, 170)\r\ncontext.fillStyle = '#fff'\r\ncontext.font = 'bold 30pt Menlo'\r\ncontext.fillText('flaviocopes.com', 600, 530)\r\nconst buffer = canvas.toBuffer('image/png')\r\nfs.writeFileSync('./output.png', buffer)",
					"description" : ""
				}
			]
		}
	]
}
